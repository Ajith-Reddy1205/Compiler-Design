//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

   boolean firstpass;
   public static HashMap variables = new HashMap<String,String>();
   public static HashMap funcs = new HashMap<String,String>();
   public static ArrayList classdec = new ArrayList<String>();
   public static HashMap classextd = new HashMap<String,String>();
   public static HashMap funpar = new HashMap<String,String>();
   public static Stack<String> currclass = new Stack<String>();
   public static Stack<String> scope = new Stack<String>();

   public static HashMap acctype = new HashMap<String,String>();
   public static String params;
   public static Stack<String> sscope = new Stack<String>();

   public boolean checkparclass(String child, String par){
      // if(par == null || child == null) return true;
      if(child.equals(par)) return true;

      if(classextd.containsKey(child)){
         String s = (String) classextd.get(child);
         return checkparclass(s, par);
      }
      else{
         return false;
      }
   }

   public String getstack(){
      String ans = "";
      int sz = scope.size();
      for(int i = 0; i < sz; i++){
         String a = scope.elementAt(i);
         ans = ans + a + "-";
      }
      return ans;
   }

   public String getsstack(){
      String ans = "";
      int sz = sscope.size();
      for(int i = 0; i < sz; i++){
         String a = sscope.elementAt(i);
         ans = ans + a + "-";
      }
      return ans;
   }


   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R) n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      firstpass = true;
      params = "";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      // System.out.println("Symbol Table successfully done!");
      // for( Object x : variables.keySet() ){
      //    x = (String)x;
      //    System.out.println(x + " - " + (String)variables.get(x));
      // }
      // System.out.println("NEXT IS AS FOLLOWS....");
      firstpass = false;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String mainclass = n.f1.f0.toString();
      if(firstpass){
         if(classdec.contains(mainclass)){
            System.out.println("Type error");
            System.exit(0);
         }
         else{
            classdec.add(mainclass);
         }
         scope.push(mainclass);
      }
      else {
         currclass.push(mainclass);
         sscope.push(mainclass);
      }
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      if(firstpass){
         String cur = getstack() + "main";
         scope.push("main");
         if(funcs.containsKey(cur)){
            System.out.println("Type error");
            System.exit(0);
         }
         else{
            funcs.put(cur, "void");
         }
      }
      else {
         sscope.push("main");
      }
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      String x = (String) n.f11.f0.toString();
      if(firstpass){
         String temp = getstack() + x;
         variables.put(temp, x);
      }
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      if(firstpass) scope.pop();
      else sscope.pop();
      n.f16.accept(this, argu);
      if(firstpass) scope.pop();
      else{
         currclass.pop();
         sscope.pop();
      }
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String classname = (String) n.f1.f0.toString();
      if(firstpass){
         if(classdec.contains(classname)){
            System.out.println("Type error");
            System.exit(0);
         }
         else{
            classdec.add(classname);
         }
         scope.push(classname);
      }
      else{
         currclass.push(classname);
         sscope.push(classname);
      }
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      if(firstpass) scope.pop();
      else{
         currclass.pop();
         sscope.pop();
      }
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String childclass = (String) n.f1.f0.toString();
      if(firstpass){
         if(classdec.contains(childclass)){
            System.out.println("Type error");
            System.exit(0);
         }
         else{
            classdec.add(childclass);
         }
         scope.push(childclass);
      }
      else{
         currclass.push(childclass);
         sscope.push(childclass);
      }
      n.f2.accept(this, argu);
      String parentclass = (String) n.f3.f0.toString();
      if(firstpass){
         classextd.put(childclass,parentclass);
      }
      else{
         if(!classdec.contains(parentclass)){
            System.out.println("Type error");
            System.exit(0);
         }
      }
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      if(firstpass) scope.pop();
      else{
         currclass.pop();
         sscope.pop();
      }
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      String typ = (String) n.f0.accept(this, argu);
      String id = (String) n.f1.f0.toString();
      if(firstpass){
         String cur = getstack() + id;
         if(variables.containsKey(cur)){
            System.out.println("Type error");
            System.exit(0);
         }
         else{
            variables.put(cur, typ);
         }
      }
      else {
         boolean a1 = typ.equals("int");
         boolean a2 = typ.equals("int[]");
         boolean a3 = typ.equals("boolean");
         boolean a4 = classdec.contains(typ);
         if(!a1 && !a2 && !a3 && !a4){
            System.out.println("Type error");
            System.exit(0);
         }
      }
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> AccessType()
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      String acc = (String) n.f0.accept(this, argu);
      String typ = (String) n.f1.accept(this, argu);
      String id = (String) n.f2.f0.toString();
      String store = "";
      if(firstpass){
         String cur = getstack() + id;
         store = cur;
         if(funcs.containsKey(cur)){
            System.out.println("Type error");
            System.exit(0);
         }
         else{
            funcs.put(cur, typ);
            acctype.put(cur, acc);
         }
         scope.push(id);
      }
      else {
         boolean a1 = typ.equals("int");
         boolean a2 = typ.equals("int[]");
         boolean a3 = typ.equals("boolean");
         boolean a4 = classdec.contains(typ);
         if(!a1 && !a2 && !a3 && !a4){
            System.out.println("Type error");
            System.exit(0);
         }
         sscope.push(id);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      if(firstpass){
         String cur = store;
         funpar.put(cur, params);
         // System.out.println(cur);
         params = "";
      }

      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      String res = (String) n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      if(firstpass) scope.pop();
      else {
         sscope.pop();
         boolean a1 = classdec.contains(typ);
         boolean a2 = classdec.contains(res);
         boolean a3 = typ.equals(res);
         boolean a4 = checkparclass(res, typ);
         if(a1 && a2 && !a3 && !a4){
            System.out.println("Type error");
            System.exit(0);
         }
         else {
            if(!a3){
               // System.out.println(typ + " " + res);
               System.out.println("Type error");
               System.exit(0);
            }
         }
      }
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      if(!firstpass) return _ret;
      String typ = (String) n.f0.accept(this, argu);
      String id = (String) n.f1.f0.toString();
      if(firstpass){
         String cur = getstack() + id;
         if(variables.containsKey(cur)){
            System.out.println("Type error");
            System.exit(0);
         }
         else{
            // System.out.println(cur + " fp " + typ);
            variables.put(cur, typ);
         }
         params += typ;
      }
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(firstpass) params += "-";
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      String ret = (String) n.f0.accept(this, argu);
      return (R) ret;
   }

   /**
    * f0 -> PublicType()
    *       | PrivateType()
    *       | ProtectedType()
    */
   public R visit(AccessType n, A argu) {
      R _ret=null;
      String ret = (String) n.f0.accept(this, argu);
      return (R) ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String ret = "int[]";
      return (R) ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String ret = "boolean";
      return (R) ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String ret = "int";
      return (R) ret;
   }

   /**
    * f0 -> "public"
    */
   public R visit(PublicType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String ret = "public";
      return (R) ret;
   }

   /**
    * f0 -> "private"
    */
   public R visit(PrivateType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String ret = "private";
      return (R) ret;
   }

   /**
    * f0 -> "protected"
    */
   public R visit(ProtectedType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String ret = "protected";
      return (R) ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      String id = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      if(!firstpass){
         // System.out.println(id + " as " + exp);
         if(classdec.contains(id) && classdec.contains(exp)){
            if(!checkparclass(exp, id)){
               System.out.println("Type error");
               System.exit(0);
            }
         }
         else {
            // System.out.println(id + " " + exp);
            if(!id.equals(exp)){
               System.out.println("Type error");
               System.exit(0);
            }
         }
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      String id = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp1 = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String exp2 = (String) n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      if(!firstpass){
         boolean a1 = id.equals("int[]");
         boolean a2 = exp1.equals("int");
         boolean a3 = exp2.equals("int");
         if(!a1 || !a2 || !a3){
            System.out.println("Type error");
            System.exit(0);
         }
      }
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(!firstpass){
         if(!exp.equals("boolean")){
            System.out.println("Type error");
            System.exit(0);
         }
      }
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      if(!firstpass){
         if(!exp.equals("boolean")){
            System.out.println("Type error");
            System.exit(0);
         }
      }
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(!firstpass){
         if(!exp.equals("boolean")){
            System.out.println("Type error");
            System.exit(0);
         }
      }
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(!firstpass){
         String k = "k" + exp;
         if(!k.equals("kint") && !k.equals("knull")){
            System.out.println("Type error");
            System.exit(0);
         }
      }
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | TernaryExpression()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      String ret = (String) n.f0.accept(this, argu);
      return (R) ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      String exp1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp2 = (String) n.f2.accept(this, argu);
      if(!firstpass){
         // System.out.println(exp1 + " " + exp2);
         if(!exp1.equals("boolean") || !exp2.equals("boolean")){
            System.out.println("Type error");
            System.exit(0);
         }
      }
      _ret = (R) ("boolean");
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      String exp1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp2 = (String) n.f2.accept(this, argu);
      if(!firstpass){
         if(!exp1.equals("boolean") || !exp2.equals("boolean")){
            System.out.println("Type error");
            System.exit(0);
         }
      }
      _ret = (R) ("boolean");
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      String exp1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp2 = (String) n.f2.accept(this, argu);
      if(!firstpass){
         // System.out.println(exp1 + " " +  exp2);
         if(!exp1.equals("int") || !exp2.equals("int")){
            System.out.println("Type error");
            System.exit(0);
         }
      }
      _ret = (R) ("boolean");
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      String exp1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp2 = (String) n.f2.accept(this, argu);
      if(!firstpass){
         if(!exp1.equals(exp2)){
            boolean a1 = checkparclass(exp1, exp2);
            boolean a2 = checkparclass(exp2, exp1);
            if(!a1 && !a2){
               System.out.println("Type error");
               System.exit(0);
            }
         }
      }
      _ret = (R) ("boolean");
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      String exp1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp2 = (String) n.f2.accept(this, argu);
      if(!firstpass){
         if(!exp1.equals("int") || !exp2.equals("int")){
            System.out.println("Type error");
            System.exit(0);
         }
      }
      _ret = (R) ("int");
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      String exp1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp2 = (String) n.f2.accept(this, argu);
      if(!firstpass){
         if(!exp1.equals("int") || !exp2.equals("int")){
            System.out.println("Type error");
            System.exit(0);
         }
      }
      _ret = (R) ("int");
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      String exp1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp2 = (String) n.f2.accept(this, argu);
      if(!firstpass){
         if(!exp1.equals("int") || !exp2.equals("int")){
            System.out.println("Type error");
            System.exit(0);
         }
      }
      _ret = (R) ("int");
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      String exp1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp2 = (String) n.f2.accept(this, argu);
      if(!firstpass){
         if(!exp1.equals("int") || !exp2.equals("int")){
            System.out.println("Type error");
            System.exit(0);
         }
      }
      _ret = (R) ("int");
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      String exp1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp2 = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      if(!firstpass){
         if(!exp1.equals("int[]") || !exp2.equals("int")){
            System.out.println("Type error");
            System.exit(0);
         }
      }
      _ret = (R) ("int");
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      String exp = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(!firstpass){
         if(!exp.equals("int[]")){
            System.out.println("Type error");
            System.exit(0);
         }
      }
      _ret = (R)("int");
      return _ret;
   }

   public String findfuntype(String clas, String id){
      String cur = clas + "-" + id;
      // System.out.println(cur);
      String currentclass = currclass.peek();
      for(Object key : funcs.keySet() ){
         key = (String) key;
         if(key.equals(cur)){
            String access = (String) acctype.get(cur);
            return cur;
         }
      }
      
      String temp = clas;
      int lev = 0;
      while(classextd.containsKey(temp)){
         lev++;
         temp = (String) classextd.get(temp);
         String s = temp + "-" + id;
         for( Object key : funcs.keySet() ){
            key = (String) key;
            if(key.equals(s)){
               String access = (String) acctype.get(s);
               if(access.equals("public")) return s;
               else if(access.equals("protected")){
                  if(checkparclass(currentclass, temp)){
                     return s;
                  }
                  else return "error";
               }
               else{
                  return "error";
               }
            }
         }
      }

      return "error";
   }

   public boolean matchparams(String typ, ArrayList<String> lis1){
      String s1 = (String) funpar.get(typ);
      ArrayList<String> lis2 = new ArrayList<String>();

      // System.out.println(typ + " " + s1);
      for(String x : s1.split("-")){
         // System.out.println(x);
         if(classdec.contains(x) || x.equals("int") || x.equals("boolean")){
            lis2.add(x);
         }
      }

      boolean flag = true;
      // System.out.println(lis1.size() + " " + lis2.size());
      if(lis1.size() == lis2.size()){
         int sz = lis1.size();
         for(int i = 0; i < sz; i++){
            String str1 = lis1.get(i);
            String str2 = lis2.get(i);
            // System.out.println(str1 + " " + str2);
            if(!checkparclass(str1, str2)){
               flag = false;
               return flag;
            }
         }
      }
      else{
         flag = false;
      }

      return flag;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      String exp = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String id = (String) n.f2.f0.toString();
      n.f3.accept(this, argu);
      ArrayList<String> parlist = new ArrayList<String>();
      n.f4.accept(this, (A) parlist);
      n.f5.accept(this, argu);

      if(!firstpass){
         String temp = id + "-" + exp;
         String typ = findfuntype(exp, id);
         // System.out.println(temp + " is " + typ);
         if(funcs.containsKey(typ)){
            _ret = (R) funcs.get(typ);
            // System.out.println(typ);
            boolean flag = matchparams(typ,parlist);
            // System.out.println(flag);
            // System.out.println(id);
            if(flag == false){
               System.out.println("Type error");
               System.exit(0);
            }
         }
         else{
            System.out.println("Type error");
            System.exit(0);
         }
      }

      return _ret;
   }

   public String findLCA(String cl1, String cl2){
      ArrayList<String> lis1 = new ArrayList<String>();
      ArrayList<String> lis2 = new ArrayList<String>();

      String temp1 = cl1;
      String temp2 = cl2;

      lis1.add(temp1);
      lis2.add(temp2);

      while(classextd.containsKey(temp1)){
         temp1 = (String) classextd.get(temp1);
         lis1.add(temp1);
      }
      while(classextd.containsKey(temp2)){
         temp2 = (String) classextd.get(temp2);
         lis2.add(temp2);
      }

      int sz1 = lis1.size() -1;
      int sz2 = lis2.size() -1;

      int cur = 0;
      while(sz1 >= 0 && sz2 >= 0){
         String p1 = lis1.get(sz1);
         String p2 = lis2.get(sz2);
         if(p1 != p2){
            if(cur == 0) return "error";
            else return lis1.get(sz1+1);
         }
         sz1--;
         sz2--;
         cur++;
      }
      return cl1;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "?"
    * f2 -> PrimaryExpression()
    * f3 -> ":"
    * f4 -> PrimaryExpression()
    */
   public R visit(TernaryExpression n, A argu) {
      R _ret=null;
      String exp1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp2 = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      String exp3 = (String) n.f4.accept(this, argu);
      if(!firstpass){
         if(!exp1.equals("boolean")){
            System.out.println("Type error");
            System.exit(0);
         }
         else {
            String ret = findLCA(exp2, exp3);
            _ret = (R) ret;
         }
      }
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      String exp = (String) n.f0.accept(this, argu);
      ArrayList<String> temp = new ArrayList<String>();
      if(!firstpass){
         temp.add(exp);
         String s = "";
         for(String x: temp){
            s = s + x;
         }
         if(!s.equals("")) {
            ((ArrayList<String>)argu).add(s);
         }
      }
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String exp = (String) n.f1.accept(this, argu);
      ArrayList<String> temp = new ArrayList<String>();
      if(!firstpass){
         temp.add(exp);
         String s = "";
         for(String x: temp){
            s = s + x;
         }
         if(!s.equals("")) {
            ((ArrayList<String>)argu).add(s);
         }
      }
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      String ret = (String) n.f0.accept(this, argu);
      return (R)ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String ret = "int";
      return (R)ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String ret = "boolean";

      return (R) ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String ret = "boolean";

      return (R) ret;
   }

   public String totextd(String cur){
      String x = (String) classextd.get(cur);
      String temp = x;
      while(classextd.containsKey(temp)){
         x = x + "-" + classextd.get(temp);
         temp = (String) classextd.get(temp);
      }
      return x;
   }

   public String getvartype(String id){
      String str1 = getsstack() + id;
      // System.out.println(str1);
      String str2 = currclass.peek() + "-" + id;
      // System.out.println(str2);
      for( Object x : variables.keySet() ){
         x = (String)x;
         // System.out.println("x = " + x);
         if(x.equals(str1)){
            return str1;
         }
      }
      for(Object x : variables.keySet()){
         x = (String)x;
         if(x.equals(str2)){
            return str2;
         }
      }
      String clas = currclass.peek();
      if(classextd.containsKey(clas)){
         String a = totextd(clas);
         // System.out.println("exted class = " + a);
         for(String i : a.split("-")){
            String pp = i + "-"+id;
            for(Object xx : variables.keySet()){
               xx = (String)xx;
               if(xx.equals(pp)){
                  return pp;
               }
            }
         }
      }

      return "error";
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      String ret = (String) n.f0.toString();
      if(!firstpass){
         // System.out.println(ret);
         String temp = getvartype(ret);
         // System.out.println(ret + " "  + temp);
         if(variables.containsKey(temp)){
            String x = (String) variables.get(temp);
            _ret = (R)x;
         }
         else if(funcs.containsKey(currclass.peek() + "-" + ret)){
            _ret = (R)ret;
         }
         else if(classdec.contains(ret)){
            _ret = (R)ret;
         }
         else{
            System.out.println("Type error");
            System.exit(0);
         }
      }
      else {
         _ret = (R)ret;
      }
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(!firstpass){
         if(!currclass.empty()){
            String x = currclass.peek();
            _ret = (R)x;
         }
         else{
            _ret = (R)("null");
         }
      }
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      _ret = (R)("int[]");
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String id = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      _ret = (R)id;
      // System.out.println(id + " in alloc");
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String exp = (String) n.f1.accept(this, argu);
      if(!firstpass){
         if(!exp.equals("boolean")){
            System.out.println("Type error");
            System.exit(0);
         }
      }
      _ret = (R)("boolean");
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String exp = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      return (R) exp;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}